/*
 * This file is generated by jOOQ.
 */
package nl.rijksoverheid.mev.brp.brpv.generated.tables;


import nl.rijksoverheid.mev.brp.brpv.generated.Keys;
import nl.rijksoverheid.mev.brp.brpv.generated.Public;
import nl.rijksoverheid.mev.brp.brpv.generated.tables.records.Lo3PlGezagsverhoudingRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lo3PlGezagsverhouding extends TableImpl<Lo3PlGezagsverhoudingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lo3_pl_gezagsverhouding</code>
     */
    public static final Lo3PlGezagsverhouding LO3_PL_GEZAGSVERHOUDING = new Lo3PlGezagsverhouding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Lo3PlGezagsverhoudingRecord> getRecordType() {
        return Lo3PlGezagsverhoudingRecord.class;
    }

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.pl_id</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Long> PL_ID = createField(DSL.name("pl_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.volg_nr</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Short> VOLG_NR = createField(DSL.name("volg_nr"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.minderjarig_gezag_ind</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, String> MINDERJARIG_GEZAG_IND = createField(DSL.name("minderjarig_gezag_ind"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.curatele_register_ind</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Short> CURATELE_REGISTER_IND = createField(DSL.name("curatele_register_ind"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.doc_gemeente_code</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Short> DOC_GEMEENTE_CODE = createField(DSL.name("doc_gemeente_code"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.doc_datum</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> DOC_DATUM = createField(DSL.name("doc_datum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.doc_beschrijving</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, String> DOC_BESCHRIJVING = createField(DSL.name("doc_beschrijving"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.onderzoek_gegevens_aand</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> ONDERZOEK_GEGEVENS_AAND = createField(DSL.name("onderzoek_gegevens_aand"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.onderzoek_start_datum</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> ONDERZOEK_START_DATUM = createField(DSL.name("onderzoek_start_datum"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.onderzoek_eind_datum</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> ONDERZOEK_EIND_DATUM = createField(DSL.name("onderzoek_eind_datum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.onjuist_ind</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, String> ONJUIST_IND = createField(DSL.name("onjuist_ind"), SQLDataType.CHAR(1), this, "");

    /**
     * The column
     * <code>public.lo3_pl_gezagsverhouding.geldigheid_start_datum</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> GELDIGHEID_START_DATUM = createField(DSL.name("geldigheid_start_datum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lo3_pl_gezagsverhouding.opneming_datum</code>.
     */
    public final TableField<Lo3PlGezagsverhoudingRecord, Integer> OPNEMING_DATUM = createField(DSL.name("opneming_datum"), SQLDataType.INTEGER, this, "");

    private Lo3PlGezagsverhouding(Name alias, Table<Lo3PlGezagsverhoudingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lo3PlGezagsverhouding(Name alias, Table<Lo3PlGezagsverhoudingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lo3_pl_gezagsverhouding</code> table
     * reference
     */
    public Lo3PlGezagsverhouding(String alias) {
        this(DSL.name(alias), LO3_PL_GEZAGSVERHOUDING);
    }

    /**
     * Create an aliased <code>public.lo3_pl_gezagsverhouding</code> table
     * reference
     */
    public Lo3PlGezagsverhouding(Name alias) {
        this(alias, LO3_PL_GEZAGSVERHOUDING);
    }

    /**
     * Create a <code>public.lo3_pl_gezagsverhouding</code> table reference
     */
    public Lo3PlGezagsverhouding() {
        this(DSL.name("lo3_pl_gezagsverhouding"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Lo3PlGezagsverhoudingRecord> getPrimaryKey() {
        return Keys.LO3_PL_GEZAGSVERHOUDING_PK;
    }

    @Override
    public Lo3PlGezagsverhouding as(String alias) {
        return new Lo3PlGezagsverhouding(DSL.name(alias), this);
    }

    @Override
    public Lo3PlGezagsverhouding as(Name alias) {
        return new Lo3PlGezagsverhouding(alias, this);
    }

    @Override
    public Lo3PlGezagsverhouding as(Table<?> alias) {
        return new Lo3PlGezagsverhouding(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3PlGezagsverhouding rename(String name) {
        return new Lo3PlGezagsverhouding(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3PlGezagsverhouding rename(Name name) {
        return new Lo3PlGezagsverhouding(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3PlGezagsverhouding rename(Table<?> name) {
        return new Lo3PlGezagsverhouding(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding where(Condition condition) {
        return new Lo3PlGezagsverhouding(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3PlGezagsverhouding where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3PlGezagsverhouding where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3PlGezagsverhouding where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3PlGezagsverhouding where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3PlGezagsverhouding whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
