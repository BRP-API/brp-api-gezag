/*
 * This file is generated by jOOQ.
 */
package nl.rijksoverheid.mev.brp.brpv.generated.tables;


import nl.rijksoverheid.mev.brp.brpv.generated.Keys;
import nl.rijksoverheid.mev.brp.brpv.generated.Public;
import nl.rijksoverheid.mev.brp.brpv.generated.tables.records.Lo3TitelPredicaatRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lo3TitelPredicaat extends TableImpl<Lo3TitelPredicaatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lo3_titel_predicaat</code>
     */
    public static final Lo3TitelPredicaat LO3_TITEL_PREDICAAT = new Lo3TitelPredicaat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Lo3TitelPredicaatRecord> getRecordType() {
        return Lo3TitelPredicaatRecord.class;
    }

    /**
     * The column <code>public.lo3_titel_predicaat.titel_predicaat</code>.
     */
    public final TableField<Lo3TitelPredicaatRecord, String> TITEL_PREDICAAT = createField(DSL.name("titel_predicaat"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.lo3_titel_predicaat.titel_predicaat_oms</code>.
     */
    public final TableField<Lo3TitelPredicaatRecord, String> TITEL_PREDICAAT_OMS = createField(DSL.name("titel_predicaat_oms"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.lo3_titel_predicaat.titel_predicaat_soort</code>.
     */
    public final TableField<Lo3TitelPredicaatRecord, String> TITEL_PREDICAAT_SOORT = createField(DSL.name("titel_predicaat_soort"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.lo3_titel_predicaat.creatie_dt</code>.
     */
    public final TableField<Lo3TitelPredicaatRecord, LocalDateTime> CREATIE_DT = createField(DSL.name("creatie_dt"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Lo3TitelPredicaat(Name alias, Table<Lo3TitelPredicaatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lo3TitelPredicaat(Name alias, Table<Lo3TitelPredicaatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lo3_titel_predicaat</code> table reference
     */
    public Lo3TitelPredicaat(String alias) {
        this(DSL.name(alias), LO3_TITEL_PREDICAAT);
    }

    /**
     * Create an aliased <code>public.lo3_titel_predicaat</code> table reference
     */
    public Lo3TitelPredicaat(Name alias) {
        this(alias, LO3_TITEL_PREDICAAT);
    }

    /**
     * Create a <code>public.lo3_titel_predicaat</code> table reference
     */
    public Lo3TitelPredicaat() {
        this(DSL.name("lo3_titel_predicaat"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Lo3TitelPredicaatRecord> getPrimaryKey() {
        return Keys.LO3_TITEL_PREDICAAT_PK;
    }

    @Override
    public Lo3TitelPredicaat as(String alias) {
        return new Lo3TitelPredicaat(DSL.name(alias), this);
    }

    @Override
    public Lo3TitelPredicaat as(Name alias) {
        return new Lo3TitelPredicaat(alias, this);
    }

    @Override
    public Lo3TitelPredicaat as(Table<?> alias) {
        return new Lo3TitelPredicaat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3TitelPredicaat rename(String name) {
        return new Lo3TitelPredicaat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3TitelPredicaat rename(Name name) {
        return new Lo3TitelPredicaat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lo3TitelPredicaat rename(Table<?> name) {
        return new Lo3TitelPredicaat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat where(Condition condition) {
        return new Lo3TitelPredicaat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3TitelPredicaat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3TitelPredicaat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3TitelPredicaat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lo3TitelPredicaat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lo3TitelPredicaat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
